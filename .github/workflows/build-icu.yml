jobs:
  genicudata:
    name: Generate ICU4C Data
    needs: proddata
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      id: downloadprod
      name: Download CLDR Production Artifact
      uses: actions/download-artifact@v3
      with:
        name: cldr-prod
        path: .
    - continue-on-error: true
      id: downloadtools
      name: Download CLDR tools
      uses: actions/download-artifact@v3
      with:
        name: cldr-code
        path: cldr-code
    - continue-on-error: true
      name: Set up JDK
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 11
    - continue-on-error: true
      name: Setup Maven Settings
      uses: s4u/maven-settings-action@v2.8.0
      with:
        servers: "[{\n    \"id\": \"github\",\n    \"username\": \"${{ github.actor\
          \ }}\",\n    \"password\": \"${{ github.token }}\"\n},{\n    \"id\": \"\
          githubicu\",\n    \"username\": \"${{ github.actor }}\",\n    \"password\"\
          : \"${{ github.token }}\"\n},{\n    \"id\": \"githubcldr\",\n    \"username\"\
          : \"${{ github.actor }}\",\n    \"password\": \"${{ github.token }}\"\n\
          }]\n"
    - continue-on-error: true
      name: Create empty CLDR dir, unpack cldr-prod
      run: mkdir -p cldr cldr-prod && cd cldr-prod && unzip ../cldr-prod.zip
    - continue-on-error: true
      name: Clone ICU
      uses: actions/checkout@v4
      with:
        lfs: false
        path: icu
        ref: ${{ github.event.inputs.icu-ref }}
        repository: ${{ github.event.inputs.icu-repo }}
    - continue-on-error: true
      name: Cache local Maven repository
      uses: actions/cache@v3
      with:
        key: ${{ runner.os }}-maven-${{ hashFiles('icu/tools/**/pom.xml') }}
        path: ~/.m2/repository
        restore-keys: '${{ runner.os }}-maven-

          '
    - continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      name: Install CLDR tools
      run: 'mvn -B install:install-file   -Dproject.parent.relativePath=""   -DgroupId=org.unicode.cldr
        -DartifactId=cldr-api   -Dversion=0.1-SNAPSHOT   -Dpackaging=jar   -DgeneratePom=true
        -Dfile=cldr-code/cldr-code.jar

        '
    - continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      name: Generate ICU4C Data
      run: 'env TOOLS_ROOT=$(pwd)/icu/tools/ CLDR_DIR=$(pwd)/cldr CLDR_DATA_DIR=$(pwd)/cldr-prod/
        ant -f icu/tools/cldr/cldr-to-icu/build-icu-data.xml clean all && ln icu/icu4c/LICENSE
        icu/icu4c/source/data/

        '
    - continue-on-error: true
      name: Zip up icu-data.zip
      run: cd icu/icu4c/source && zip -rlq ../../../icu-data.zip data
    - continue-on-error: true
      name: Upload icu-data.zip
      uses: actions/upload-artifact@v3
      with:
        name: icu-data
        path: icu-data.zip
  icu4c-clang:
    name: ICU4C Build/Test, Ubuntu/Clang, new data
    needs: genicudata
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Clone ICU
      uses: actions/checkout@v4
      with:
        lfs: false
        ref: ${{ github.event.inputs.icu-ref }}
        repository: ${{ github.event.inputs.icu-repo }}
    - continue-on-error: true
      name: Download icu-data.zip
      uses: actions/download-artifact@v3
      with:
        name: icu-data
        path: .
    - continue-on-error: true
      name: Unpack icu-data.zip
      run: cd icu4c/source && rm -rf data && unzip -o ../../icu-data.zip
    - continue-on-error: true
      env:
        CFLAGS: -Wimplicit-fallthrough
        CPPFLAGS: -DU_NO_DEFAULT_INCLUDE_UTF_HEADERS=1
        CXXFLAGS: -Wimplicit-fallthrough
      name: ICU4C with clang
      run: 'sudo apt-get -y install doxygen;

        cd icu4c/source;

        ./runConfigureICU Linux;

        make -j 2;

        make dist

        '
    - continue-on-error: true
      name: Upload icu4c
      uses: actions/upload-artifact@v3
      with:
        name: icu4c
        path: icu4c/source/dist
    - continue-on-error: true
      env:
        CFLAGS: -Wimplicit-fallthrough
        CPPFLAGS: -DU_NO_DEFAULT_INCLUDE_UTF_HEADERS=1
        CXXFLAGS: -Wimplicit-fallthrough
      name: ICU4C with clang test
      run: 'cd icu4c/source;

        make -j 2 check;

        ( cd test/depstest && python3 depstest.py ../../../source/ );

        ( cd .. && source/test/hdrtst/testtagsguards.sh );

        '
  icu4j-java16:
    name: ICU4J Build/Test, Java 16, new data
    needs: genicudata
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Clone ICU
      uses: actions/checkout@v4
      with:
        lfs: true
        ref: ${{ github.event.inputs.icu-ref }}
        repository: ${{ github.event.inputs.icu-repo }}
    - continue-on-error: true
      name: Checkout lfs objects
      run: git lfs pull
    - continue-on-error: true
      name: Download icu-data.zip
      uses: actions/download-artifact@v3
      with:
        name: icu-data
        path: .
    - continue-on-error: true
      name: Unpack icu-data.zip
      run: cd icu4c/source && rm -rf data && unzip -o ../../icu-data.zip
    - continue-on-error: true
      name: Generate ICU4J data
      run: cd icu4c/source && ./runConfigureICU Linux && make -j2 && make -C data
        icu4j-data-install ICU4J_ROOT=$(cd ../../icu4j ; pwd)
    - continue-on-error: true
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: '16'
    - continue-on-error: true
      name: ICU4J Build
      run: 'cd icu4j;

        ant init;

        ant jar;

        ant releaseBinaries;

        '
    - continue-on-error: true
      name: Upload icu4j
      uses: actions/upload-artifact@v3
      with:
        name: icu4j
        path: icu4j/release
    - continue-on-error: true
      name: ICU4J Test
      run: 'ant check;

        ant localespiCheck;

        '
    - continue-on-error: true
      if: ${{ failure() }}
      name: List failures (if any)
      run: '[ -d icu4j/out/junit-results ] && cd icu4j && cat `find out/junit-results
        -name "*.txt" -exec grep -l FAILED {} \;`;

        '
  proddata:
    name: Build Production Data
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Clone CLDR
      uses: actions/checkout@v4
      with:
        lfs: false
        ref: ${{ github.event.inputs.cldr-ref }}
        repository: ${{ github.event.inputs.cldr-repo }}
    - continue-on-error: true
      name: Set up JDK
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 11
    - continue-on-error: true
      name: Cache local Maven repository
      uses: actions/cache@v3
      with:
        key: ${{ runner.os }}-maven-${{ hashFiles('tools/**/pom.xml') }}
        path: ~/.m2/repository
        restore-keys: '${{ runner.os }}-maven-

          '
    - continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      name: Build with Maven
      run: 'mvn -s .github/workflows/mvn-settings.xml -B compile install package --file
        tools/pom.xml -DskipTests=true -pl cldr-code

        '
    - continue-on-error: true
      name: Upload cldr-code
      uses: actions/upload-artifact@v3
      with:
        name: cldr-code
        path: tools/cldr-code/target/cldr-code.jar
    - continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      name: Build prod Data
      run: "rm -rf target/cldr-prod\nmkdir -p target/cldr-prod/common\nmvn  -s .github/workflows/mvn-settings.xml\
        \ -B  -DCLDR_DIR=$(pwd) -DCLDR_GITHUB_ANNOTATIONS=true --file=tools/pom.xml\
        \ -pl cldr-code  \\\n  exec:java -Dexec.mainClass=org.unicode.cldr.tool.GenerateProductionData\
        \ \\\n  -Dexec.args=\"-d target/cldr-prod/common/\"\n(cd target/cldr-prod/\
        \ && zip -r ../cldr-prod.zip *)\n"
    - continue-on-error: true
      name: Upload cldr-prod
      uses: actions/upload-artifact@v3
      with:
        name: cldr-prod
        path: target/cldr-prod.zip
name: Build ICU from CLDR
on:
  repository_dispatch:
    types: trigger-ga___build-icu.yml
